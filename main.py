import tkinter as tk
from tkinter import ttk, messagebox


class Task:
    def __init__(self, task_id, description, due_date):
        self.task_id = task_id
        self.description = description
        self.due_date = due_date
        self.completed = False

    def mark_as_completed(self):
        self.completed = True

    def update_description(self, new_description):
        self.description = new_description

    def update_due_date(self, new_due_date):
        self.due_date = new_due_date


class TaskManager:
    def __init__(self):
        self.tasks = []
        self.next_id = 1

    def add_task(self, description, due_date):
        new_task = Task(self.next_id, description, due_date)
        self.tasks.append(new_task)
        self.next_id += 1

    def delete_task(self, task_id):
        for task in self.tasks:
            if task.task_id == task_id:
                self.tasks.remove(task)
                return True
        return False

    def edit_task(self, task_id, new_description, new_due_date):
        for task in self.tasks:
            if task.task_id == task_id:
                task.update_description(new_description)
                task.update_due_date(new_due_date)
                return True
        return False

    def mark_task_completed(self, task_id):
        for task in self.tasks:
            if task.task_id == task_id:
                task.mark_as_completed()
                return True
        return False


class TaskManagerApp:
    def __init__(self, master):
        self.master = master
        self.manager = TaskManager()

        master.title("–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á")
        master.geometry("800x400")

        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á
        self.tree = ttk.Treeview(master, columns=('ID', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°—Ä–æ–∫', '–°—Ç–∞—Ç—É—Å'), show='headings')
        self.tree.heading('ID', text='ID')
        self.tree.heading('–û–ø–∏—Å–∞–Ω–∏–µ', text='–û–ø–∏—Å–∞–Ω–∏–µ')
        self.tree.heading('–°—Ä–æ–∫', text='–°—Ä–æ–∫')
        self.tree.heading('–°—Ç–∞—Ç—É—Å', text='–°—Ç–∞—Ç—É—Å')
        self.tree.column('ID', width=50)
        self.tree.column('–û–ø–∏—Å–∞–Ω–∏–µ', width=300)
        self.tree.column('–°—Ä–æ–∫', width=100)
        self.tree.column('–°—Ç–∞—Ç—É—Å', width=100)
        self.tree.pack(pady=20)

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        button_frame = tk.Frame(master)
        button_frame.pack(pady=10)

        self.add_btn = tk.Button(button_frame, text="–î–æ–±–∞–≤–∏—Ç—å", command=self.add_task)
        self.add_btn.pack(side=tk.LEFT, padx=5)

        self.edit_btn = tk.Button(button_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_task)
        self.edit_btn.pack(side=tk.LEFT, padx=5)

        self.delete_btn = tk.Button(button_frame, text="–£–¥–∞–ª–∏—Ç—å", command=self.delete_task)
        self.delete_btn.pack(side=tk.LEFT, padx=5)

        self.complete_btn = tk.Button(button_frame, text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ", command=self.mark_completed)
        self.complete_btn.pack(side=tk.LEFT, padx=5)

        self.refresh_tasks()

    def refresh_tasks(self):
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
        for item in self.tree.get_children():
            self.tree.delete(item)

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task in self.manager.tasks:
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if task.completed else "üïí –í —Ä–∞–±–æ—Ç–µ"
            self.tree.insert('', 'end',
                             values=(task.task_id, task.description, task.due_date, status),
                             tags=('completed' if task.completed else 'active'))

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
        self.tree.tag_configure('completed', foreground='gray')
        self.tree.tag_configure('active', foreground='green')

    def add_task(self):
        dialog = tk.Toplevel(self.master)
        dialog.title("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")

        tk.Label(dialog, text="–û–ø–∏—Å–∞–Ω–∏–µ:").grid(row=0, column=0, padx=5, pady=5)
        description_entry = tk.Entry(dialog, width=30)
        description_entry.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(dialog, text="–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:").grid(row=1, column=0, padx=5, pady=5)
        due_date_entry = tk.Entry(dialog, width=30)
        due_date_entry.grid(row=1, column=1, padx=5, pady=5)

        def save():
            desc = description_entry.get()
            date = due_date_entry.get()
            if desc and date:
                self.manager.add_task(desc, date)
                self.refresh_tasks()
                dialog.destroy()
            else:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

        tk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save).grid(row=2, columnspan=2, pady=10)

    def edit_task(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
        task_id = int(self.tree.item(selected[0])['values'][0])

        for task in self.manager.tasks:
            if task.task_id == task_id:
                dialog = tk.Toplevel(self.master)
                dialog.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")

                tk.Label(dialog, text="–û–ø–∏—Å–∞–Ω–∏–µ:").grid(row=0, column=0, padx=5, pady=5)
                description_entry = tk.Entry(dialog, width=30)
                description_entry.insert(0, task.description)
                description_entry.grid(row=0, column=1, padx=5, pady=5)

                tk.Label(dialog, text="–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:").grid(row=1, column=0, padx=5, pady=5)
                due_date_entry = tk.Entry(dialog, width=30)
                due_date_entry.insert(0, task.due_date)
                due_date_entry.grid(row=1, column=1, padx=5, pady=5)

                def save():
                    new_desc = description_entry.get()
                    new_date = due_date_entry.get()
                    if new_desc and new_date:
                        self.manager.edit_task(task_id, new_desc, new_date)
                        self.refresh_tasks()
                        dialog.destroy()
                    else:
                        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

                tk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save).grid(row=2, columnspan=2, pady=10)
                break

    def delete_task(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        task_id = int(self.tree.item(selected[0])['values'][0])
        if self.manager.delete_task(task_id):
            self.refresh_tasks()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    def mark_completed(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É")
            return

        task_id = int(self.tree.item(selected[0])['values'][0])
        if self.manager.mark_task_completed(task_id):
            self.refresh_tasks()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


if __name__ == "__main__":
    root = tk.Tk()
    app = TaskManagerApp(root)
    root.mainloop()